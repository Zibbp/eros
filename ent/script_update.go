// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/eros/ent/predicate"
	"github.com/zibbp/eros/ent/report"
	"github.com/zibbp/eros/ent/script"
)

// ScriptUpdate is the builder for updating Script entities.
type ScriptUpdate struct {
	config
	hooks    []Hook
	mutation *ScriptMutation
}

// Where appends a list predicates to the ScriptUpdate builder.
func (su *ScriptUpdate) Where(ps ...predicate.Script) *ScriptUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ScriptUpdate) SetName(s string) *ScriptUpdate {
	su.mutation.SetName(s)
	return su
}

// SetHostname sets the "hostname" field.
func (su *ScriptUpdate) SetHostname(s string) *ScriptUpdate {
	su.mutation.SetHostname(s)
	return su
}

// SetNotify sets the "notify" field.
func (su *ScriptUpdate) SetNotify(b bool) *ScriptUpdate {
	su.mutation.SetNotify(b)
	return su
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableNotify(b *bool) *ScriptUpdate {
	if b != nil {
		su.SetNotify(*b)
	}
	return su
}

// SetLastRun sets the "last_run" field.
func (su *ScriptUpdate) SetLastRun(t time.Time) *ScriptUpdate {
	su.mutation.SetLastRun(t)
	return su
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableLastRun(t *time.Time) *ScriptUpdate {
	if t != nil {
		su.SetLastRun(*t)
	}
	return su
}

// ClearLastRun clears the value of the "last_run" field.
func (su *ScriptUpdate) ClearLastRun() *ScriptUpdate {
	su.mutation.ClearLastRun()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScriptUpdate) SetUpdatedAt(t time.Time) *ScriptUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// AddReportIDs adds the "reports" edge to the Report entity by IDs.
func (su *ScriptUpdate) AddReportIDs(ids ...uuid.UUID) *ScriptUpdate {
	su.mutation.AddReportIDs(ids...)
	return su
}

// AddReports adds the "reports" edges to the Report entity.
func (su *ScriptUpdate) AddReports(r ...*Report) *ScriptUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddReportIDs(ids...)
}

// Mutation returns the ScriptMutation object of the builder.
func (su *ScriptUpdate) Mutation() *ScriptMutation {
	return su.mutation
}

// ClearReports clears all "reports" edges to the Report entity.
func (su *ScriptUpdate) ClearReports() *ScriptUpdate {
	su.mutation.ClearReports()
	return su
}

// RemoveReportIDs removes the "reports" edge to Report entities by IDs.
func (su *ScriptUpdate) RemoveReportIDs(ids ...uuid.UUID) *ScriptUpdate {
	su.mutation.RemoveReportIDs(ids...)
	return su
}

// RemoveReports removes "reports" edges to Report entities.
func (su *ScriptUpdate) RemoveReports(r ...*Report) *ScriptUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveReportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScriptUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScriptUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScriptUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScriptUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScriptUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := script.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ScriptUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := script.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Script.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Hostname(); ok {
		if err := script.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Script.hostname": %w`, err)}
		}
	}
	return nil
}

func (su *ScriptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(script.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Hostname(); ok {
		_spec.SetField(script.FieldHostname, field.TypeString, value)
	}
	if value, ok := su.mutation.Notify(); ok {
		_spec.SetField(script.FieldNotify, field.TypeBool, value)
	}
	if value, ok := su.mutation.LastRun(); ok {
		_spec.SetField(script.FieldLastRun, field.TypeTime, value)
	}
	if su.mutation.LastRunCleared() {
		_spec.ClearField(script.FieldLastRun, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedReportsIDs(); len(nodes) > 0 && !su.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScriptUpdateOne is the builder for updating a single Script entity.
type ScriptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScriptMutation
}

// SetName sets the "name" field.
func (suo *ScriptUpdateOne) SetName(s string) *ScriptUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetHostname sets the "hostname" field.
func (suo *ScriptUpdateOne) SetHostname(s string) *ScriptUpdateOne {
	suo.mutation.SetHostname(s)
	return suo
}

// SetNotify sets the "notify" field.
func (suo *ScriptUpdateOne) SetNotify(b bool) *ScriptUpdateOne {
	suo.mutation.SetNotify(b)
	return suo
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableNotify(b *bool) *ScriptUpdateOne {
	if b != nil {
		suo.SetNotify(*b)
	}
	return suo
}

// SetLastRun sets the "last_run" field.
func (suo *ScriptUpdateOne) SetLastRun(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetLastRun(t)
	return suo
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableLastRun(t *time.Time) *ScriptUpdateOne {
	if t != nil {
		suo.SetLastRun(*t)
	}
	return suo
}

// ClearLastRun clears the value of the "last_run" field.
func (suo *ScriptUpdateOne) ClearLastRun() *ScriptUpdateOne {
	suo.mutation.ClearLastRun()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScriptUpdateOne) SetUpdatedAt(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// AddReportIDs adds the "reports" edge to the Report entity by IDs.
func (suo *ScriptUpdateOne) AddReportIDs(ids ...uuid.UUID) *ScriptUpdateOne {
	suo.mutation.AddReportIDs(ids...)
	return suo
}

// AddReports adds the "reports" edges to the Report entity.
func (suo *ScriptUpdateOne) AddReports(r ...*Report) *ScriptUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddReportIDs(ids...)
}

// Mutation returns the ScriptMutation object of the builder.
func (suo *ScriptUpdateOne) Mutation() *ScriptMutation {
	return suo.mutation
}

// ClearReports clears all "reports" edges to the Report entity.
func (suo *ScriptUpdateOne) ClearReports() *ScriptUpdateOne {
	suo.mutation.ClearReports()
	return suo
}

// RemoveReportIDs removes the "reports" edge to Report entities by IDs.
func (suo *ScriptUpdateOne) RemoveReportIDs(ids ...uuid.UUID) *ScriptUpdateOne {
	suo.mutation.RemoveReportIDs(ids...)
	return suo
}

// RemoveReports removes "reports" edges to Report entities.
func (suo *ScriptUpdateOne) RemoveReports(r ...*Report) *ScriptUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveReportIDs(ids...)
}

// Where appends a list predicates to the ScriptUpdate builder.
func (suo *ScriptUpdateOne) Where(ps ...predicate.Script) *ScriptUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScriptUpdateOne) Select(field string, fields ...string) *ScriptUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Script entity.
func (suo *ScriptUpdateOne) Save(ctx context.Context) (*Script, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScriptUpdateOne) SaveX(ctx context.Context) *Script {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScriptUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScriptUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScriptUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := script.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScriptUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := script.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Script.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Hostname(); ok {
		if err := script.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Script.hostname": %w`, err)}
		}
	}
	return nil
}

func (suo *ScriptUpdateOne) sqlSave(ctx context.Context) (_node *Script, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Script.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, script.FieldID)
		for _, f := range fields {
			if !script.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != script.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(script.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Hostname(); ok {
		_spec.SetField(script.FieldHostname, field.TypeString, value)
	}
	if value, ok := suo.mutation.Notify(); ok {
		_spec.SetField(script.FieldNotify, field.TypeBool, value)
	}
	if value, ok := suo.mutation.LastRun(); ok {
		_spec.SetField(script.FieldLastRun, field.TypeTime, value)
	}
	if suo.mutation.LastRunCleared() {
		_spec.ClearField(script.FieldLastRun, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedReportsIDs(); len(nodes) > 0 && !suo.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Script{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
