// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/eros/ent/report"
	"github.com/zibbp/eros/ent/script"
)

// ScriptCreate is the builder for creating a Script entity.
type ScriptCreate struct {
	config
	mutation *ScriptMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *ScriptCreate) SetName(s string) *ScriptCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetHostname sets the "hostname" field.
func (sc *ScriptCreate) SetHostname(s string) *ScriptCreate {
	sc.mutation.SetHostname(s)
	return sc
}

// SetNotify sets the "notify" field.
func (sc *ScriptCreate) SetNotify(b bool) *ScriptCreate {
	sc.mutation.SetNotify(b)
	return sc
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableNotify(b *bool) *ScriptCreate {
	if b != nil {
		sc.SetNotify(*b)
	}
	return sc
}

// SetLastRun sets the "last_run" field.
func (sc *ScriptCreate) SetLastRun(t time.Time) *ScriptCreate {
	sc.mutation.SetLastRun(t)
	return sc
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableLastRun(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetLastRun(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScriptCreate) SetCreatedAt(t time.Time) *ScriptCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableCreatedAt(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScriptCreate) SetUpdatedAt(t time.Time) *ScriptCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableUpdatedAt(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScriptCreate) SetID(u uuid.UUID) *ScriptCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableID(u *uuid.UUID) *ScriptCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddReportIDs adds the "reports" edge to the Report entity by IDs.
func (sc *ScriptCreate) AddReportIDs(ids ...uuid.UUID) *ScriptCreate {
	sc.mutation.AddReportIDs(ids...)
	return sc
}

// AddReports adds the "reports" edges to the Report entity.
func (sc *ScriptCreate) AddReports(r ...*Report) *ScriptCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddReportIDs(ids...)
}

// Mutation returns the ScriptMutation object of the builder.
func (sc *ScriptCreate) Mutation() *ScriptMutation {
	return sc.mutation
}

// Save creates the Script in the database.
func (sc *ScriptCreate) Save(ctx context.Context) (*Script, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScriptCreate) SaveX(ctx context.Context) *Script {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScriptCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScriptCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScriptCreate) defaults() {
	if _, ok := sc.mutation.Notify(); !ok {
		v := script.DefaultNotify
		sc.mutation.SetNotify(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := script.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := script.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := script.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScriptCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Script.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := script.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Script.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Script.hostname"`)}
	}
	if v, ok := sc.mutation.Hostname(); ok {
		if err := script.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Script.hostname": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Notify(); !ok {
		return &ValidationError{Name: "notify", err: errors.New(`ent: missing required field "Script.notify"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Script.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Script.updated_at"`)}
	}
	return nil
}

func (sc *ScriptCreate) sqlSave(ctx context.Context) (*Script, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScriptCreate) createSpec() (*Script, *sqlgraph.CreateSpec) {
	var (
		_node = &Script{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(script.Table, sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(script.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Hostname(); ok {
		_spec.SetField(script.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := sc.mutation.Notify(); ok {
		_spec.SetField(script.FieldNotify, field.TypeBool, value)
		_node.Notify = value
	}
	if value, ok := sc.mutation.LastRun(); ok {
		_spec.SetField(script.FieldLastRun, field.TypeTime, value)
		_node.LastRun = &value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(script.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ReportsTable,
			Columns: []string{script.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScriptCreateBulk is the builder for creating many Script entities in bulk.
type ScriptCreateBulk struct {
	config
	builders []*ScriptCreate
}

// Save creates the Script entities in the database.
func (scb *ScriptCreateBulk) Save(ctx context.Context) ([]*Script, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Script, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScriptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScriptCreateBulk) SaveX(ctx context.Context) []*Script {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScriptCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScriptCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
