// Code generated by ent, DO NOT EDIT.

package script

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/eros/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldName, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldHostname, v))
}

// Notify applies equality check predicate on the "notify" field. It's identical to NotifyEQ.
func Notify(v bool) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldNotify, v))
}

// LastRun applies equality check predicate on the "last_run" field. It's identical to LastRunEQ.
func LastRun(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldLastRun, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldName, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldHostname, v))
}

// NotifyEQ applies the EQ predicate on the "notify" field.
func NotifyEQ(v bool) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldNotify, v))
}

// NotifyNEQ applies the NEQ predicate on the "notify" field.
func NotifyNEQ(v bool) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldNotify, v))
}

// LastRunEQ applies the EQ predicate on the "last_run" field.
func LastRunEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldLastRun, v))
}

// LastRunNEQ applies the NEQ predicate on the "last_run" field.
func LastRunNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldLastRun, v))
}

// LastRunIn applies the In predicate on the "last_run" field.
func LastRunIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldLastRun, vs...))
}

// LastRunNotIn applies the NotIn predicate on the "last_run" field.
func LastRunNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldLastRun, vs...))
}

// LastRunGT applies the GT predicate on the "last_run" field.
func LastRunGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldLastRun, v))
}

// LastRunGTE applies the GTE predicate on the "last_run" field.
func LastRunGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldLastRun, v))
}

// LastRunLT applies the LT predicate on the "last_run" field.
func LastRunLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldLastRun, v))
}

// LastRunLTE applies the LTE predicate on the "last_run" field.
func LastRunLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldLastRun, v))
}

// LastRunIsNil applies the IsNil predicate on the "last_run" field.
func LastRunIsNil() predicate.Script {
	return predicate.Script(sql.FieldIsNull(FieldLastRun))
}

// LastRunNotNil applies the NotNil predicate on the "last_run" field.
func LastRunNotNil() predicate.Script {
	return predicate.Script(sql.FieldNotNull(FieldLastRun))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasReports applies the HasEdge predicate on the "reports" edge.
func HasReports() predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportsWith applies the HasEdge predicate on the "reports" edge with a given conditions (other predicates).
func HasReportsWith(preds ...predicate.Report) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		step := newReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Script) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Script) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Script) predicate.Script {
	return predicate.Script(func(s *sql.Selector) {
		p(s.Not())
	})
}
