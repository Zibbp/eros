// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/eros/ent/predicate"
	"github.com/zibbp/eros/ent/report"
	"github.com/zibbp/eros/ent/script"
	"github.com/zibbp/eros/internal/utils"
)

// ReportUpdate is the builder for updating Report entities.
type ReportUpdate struct {
	config
	hooks    []Hook
	mutation *ReportMutation
}

// Where appends a list predicates to the ReportUpdate builder.
func (ru *ReportUpdate) Where(ps ...predicate.Report) *ReportUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ReportUpdate) SetName(s string) *ReportUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ReportUpdate) SetStatus(us utils.ReportStatus) *ReportUpdate {
	ru.mutation.SetStatus(us)
	return ru
}

// SetS3File sets the "s3_file" field.
func (ru *ReportUpdate) SetS3File(s string) *ReportUpdate {
	ru.mutation.SetS3File(s)
	return ru
}

// SetNillableS3File sets the "s3_file" field if the given value is not nil.
func (ru *ReportUpdate) SetNillableS3File(s *string) *ReportUpdate {
	if s != nil {
		ru.SetS3File(*s)
	}
	return ru
}

// ClearS3File clears the value of the "s3_file" field.
func (ru *ReportUpdate) ClearS3File() *ReportUpdate {
	ru.mutation.ClearS3File()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReportUpdate) SetUpdatedAt(t time.Time) *ReportUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetScriptID sets the "script" edge to the Script entity by ID.
func (ru *ReportUpdate) SetScriptID(id uuid.UUID) *ReportUpdate {
	ru.mutation.SetScriptID(id)
	return ru
}

// SetScript sets the "script" edge to the Script entity.
func (ru *ReportUpdate) SetScript(s *Script) *ReportUpdate {
	return ru.SetScriptID(s.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (ru *ReportUpdate) Mutation() *ReportMutation {
	return ru.mutation
}

// ClearScript clears the "script" edge to the Script entity.
func (ru *ReportUpdate) ClearScript() *ReportUpdate {
	ru.mutation.ClearScript()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReportUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReportUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReportUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReportUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReportUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := report.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReportUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := report.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Report.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := report.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Report.status": %w`, err)}
		}
	}
	if _, ok := ru.mutation.ScriptID(); ru.mutation.ScriptCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Report.script"`)
	}
	return nil
}

func (ru *ReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(report.Table, report.Columns, sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(report.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(report.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.S3File(); ok {
		_spec.SetField(report.FieldS3File, field.TypeString, value)
	}
	if ru.mutation.S3FileCleared() {
		_spec.ClearField(report.FieldS3File, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(report.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ScriptTable,
			Columns: []string{report.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ScriptTable,
			Columns: []string{report.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReportUpdateOne is the builder for updating a single Report entity.
type ReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportMutation
}

// SetName sets the "name" field.
func (ruo *ReportUpdateOne) SetName(s string) *ReportUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ReportUpdateOne) SetStatus(us utils.ReportStatus) *ReportUpdateOne {
	ruo.mutation.SetStatus(us)
	return ruo
}

// SetS3File sets the "s3_file" field.
func (ruo *ReportUpdateOne) SetS3File(s string) *ReportUpdateOne {
	ruo.mutation.SetS3File(s)
	return ruo
}

// SetNillableS3File sets the "s3_file" field if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableS3File(s *string) *ReportUpdateOne {
	if s != nil {
		ruo.SetS3File(*s)
	}
	return ruo
}

// ClearS3File clears the value of the "s3_file" field.
func (ruo *ReportUpdateOne) ClearS3File() *ReportUpdateOne {
	ruo.mutation.ClearS3File()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReportUpdateOne) SetUpdatedAt(t time.Time) *ReportUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetScriptID sets the "script" edge to the Script entity by ID.
func (ruo *ReportUpdateOne) SetScriptID(id uuid.UUID) *ReportUpdateOne {
	ruo.mutation.SetScriptID(id)
	return ruo
}

// SetScript sets the "script" edge to the Script entity.
func (ruo *ReportUpdateOne) SetScript(s *Script) *ReportUpdateOne {
	return ruo.SetScriptID(s.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (ruo *ReportUpdateOne) Mutation() *ReportMutation {
	return ruo.mutation
}

// ClearScript clears the "script" edge to the Script entity.
func (ruo *ReportUpdateOne) ClearScript() *ReportUpdateOne {
	ruo.mutation.ClearScript()
	return ruo
}

// Where appends a list predicates to the ReportUpdate builder.
func (ruo *ReportUpdateOne) Where(ps ...predicate.Report) *ReportUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReportUpdateOne) Select(field string, fields ...string) *ReportUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Report entity.
func (ruo *ReportUpdateOne) Save(ctx context.Context) (*Report, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReportUpdateOne) SaveX(ctx context.Context) *Report {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReportUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReportUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReportUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := report.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReportUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := report.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Report.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := report.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Report.status": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.ScriptID(); ruo.mutation.ScriptCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Report.script"`)
	}
	return nil
}

func (ruo *ReportUpdateOne) sqlSave(ctx context.Context) (_node *Report, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(report.Table, report.Columns, sqlgraph.NewFieldSpec(report.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Report.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, report.FieldID)
		for _, f := range fields {
			if !report.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != report.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(report.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(report.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.S3File(); ok {
		_spec.SetField(report.FieldS3File, field.TypeString, value)
	}
	if ruo.mutation.S3FileCleared() {
		_spec.ClearField(report.FieldS3File, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(report.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ScriptTable,
			Columns: []string{report.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ScriptTable,
			Columns: []string{report.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Report{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
