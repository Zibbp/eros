// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/eros/ent/script"
)

// Script is the model entity for the Script schema.
type Script struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Notify holds the value of the "notify" field.
	Notify bool `json:"notify,omitempty"`
	// LastRun holds the value of the "last_run" field.
	LastRun *time.Time `json:"last_run,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScriptQuery when eager-loading is set.
	Edges        ScriptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScriptEdges holds the relations/edges for other nodes in the graph.
type ScriptEdges struct {
	// Reports holds the value of the reports edge.
	Reports []*Report `json:"reports,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReportsOrErr returns the Reports value or an error if the edge
// was not loaded in eager-loading.
func (e ScriptEdges) ReportsOrErr() ([]*Report, error) {
	if e.loadedTypes[0] {
		return e.Reports, nil
	}
	return nil, &NotLoadedError{edge: "reports"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Script) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case script.FieldNotify:
			values[i] = new(sql.NullBool)
		case script.FieldName, script.FieldHostname:
			values[i] = new(sql.NullString)
		case script.FieldLastRun, script.FieldCreatedAt, script.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case script.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Script fields.
func (s *Script) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case script.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case script.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case script.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				s.Hostname = value.String
			}
		case script.FieldNotify:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify", values[i])
			} else if value.Valid {
				s.Notify = value.Bool
			}
		case script.FieldLastRun:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run", values[i])
			} else if value.Valid {
				s.LastRun = new(time.Time)
				*s.LastRun = value.Time
			}
		case script.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case script.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Script.
// This includes values selected through modifiers, order, etc.
func (s *Script) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryReports queries the "reports" edge of the Script entity.
func (s *Script) QueryReports() *ReportQuery {
	return NewScriptClient(s.config).QueryReports(s)
}

// Update returns a builder for updating this Script.
// Note that you need to call Script.Unwrap() before calling this method if this Script
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Script) Update() *ScriptUpdateOne {
	return NewScriptClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Script entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Script) Unwrap() *Script {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Script is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Script) String() string {
	var builder strings.Builder
	builder.WriteString("Script(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(s.Hostname)
	builder.WriteString(", ")
	builder.WriteString("notify=")
	builder.WriteString(fmt.Sprintf("%v", s.Notify))
	builder.WriteString(", ")
	if v := s.LastRun; v != nil {
		builder.WriteString("last_run=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Scripts is a parsable slice of Script.
type Scripts []*Script
